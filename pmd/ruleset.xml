<?xml version="1.0"?>

<ruleset name="All Java Rules"
	xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd">

	<!-- https://pmd.github.io/pmd-5.5.2/pmd-java/rules/index.html -->

	<rule ref="rulesets/java/android.xml"/>

	<rule ref="rulesets/java/basic.xml"/>

	<rule ref="rulesets/java/braces.xml"/>

	<rule ref="rulesets/java/clone.xml"/>

	<rule ref="rulesets/java/codesize.xml"/>
	<rule ref="rulesets/java/codesize.xml/TooManyMethods">
		<properties>
			<property name="maxmethods" value="20"/>
		</properties>
	</rule>

	<rule ref="rulesets/java/comments.xml">
		<!-- This is already properly covered by checkstyle's Javadoc checks -->
		<exclude name="CommentRequired"/>
	</rule>
	<rule ref="rulesets/java/comments.xml/CommentSize">
		<properties>
			<property name="maxLineLength" value="120"/>
			<property name="maxLines" value="20"/>
		</properties>
	</rule>


	<rule ref="rulesets/java/controversial.xml">
		<exclude name="AtLeastOneConstructor"/>

		<!-- False positivies with parameter names like "in" -->
		<exclude name="AvoidPrefixingMethodParameters"/>

		<!-- There's nothing bad in assigning "null" as a marker -->
		<exclude name="NullAssignment"/>

		<!-- Early returns may decrease mental complexity -->
		<exclude name="OnlyOneReturn"/>

		<!-- While generally useful, has too many false positives:
			* UR https://sourceforge.net/p/pmd/bugs/1383/
			* DD when variable matches method name
			* DU when passing variable to another class constructor -->
		<exclude name="DataflowAnomalyAnalysis"/>

		<!-- comments.CommentDefaultAccessModifier covers it -->
		<exclude name="DefaultPackage"/>
	</rule>

	<rule ref="rulesets/java/coupling.xml">
		<!-- It's an overkill, e.g. for the logs -->
		<exclude name="LawOfDemeter"/>

		<!-- Already covered by checkstyle.ClassFanOutComplexity -->
		<exclude name="ExcessiveImports"/>
	</rule>

	<rule ref="rulesets/java/design.xml">
		<!-- There's nothing bad in using it wisely -->
		<exclude name="AvoidSynchronizedAtMethodLevel"/>

		<!-- Don't want the last argument to be varargs -->
		<exclude name="UseVarargs"/>

		<!--
			"switch" is more readable than "if" in menu click handlers,
			which Butterknife won't support:
			https://github.com/JakeWharton/butterknife/issues/41.
		-->
		<exclude name="TooFewBranchesForASwitchStatement"/>

		<!--
			This is a useful check, however it doesn't play well with
			controversial.DefaultPackage. Disabled for now.
			https://sourceforge.net/p/pmd/discussion/188192/thread/c8ce7808/
		-->
		<exclude name="AccessorMethodGeneration"/>

		<!-- FIXME(https://github.com/pmd/pmd/issues/755): false positive -->
		<exclude name="AccessorClassGeneration"/>
	</rule>

	<rule ref="rulesets/java/empty.xml"/>

	<rule ref="rulesets/java/finalizers.xml"/>

	<rule ref="rulesets/java/imports.xml"/>

	<rule ref="rulesets/java/j2ee.xml">
		<!-- Nothing bad with using threads for network operations -->
		<exclude name="DoNotUseThreads"/>
	</rule>

	<rule ref="rulesets/java/javabeans.xml">
		<!-- We don't use JavaBeans extensively -->
		<exclude name="BeanMembersShouldSerialize"/>
	</rule>

	<!-- TODO(dotdoom): make this useful by including jUnit into sourceset -->
	<rule ref="rulesets/java/junit.xml"/>

	<rule ref="rulesets/java/logging-jakarta-commons.xml">
		<!-- We have ProGuard for this -->
		<exclude name="GuardLogStatement"/>
	</rule>

	<rule ref="rulesets/java/logging-java.xml">
		<!-- We have ProGuard for this -->
		<exclude name="GuardLogStatementJavaUtil"/>
		<!--
			Doesn't recognize new slf4j format with throwable as an optional
			last argument.
		-->
		<exclude name="InvalidSlf4jMessageFormat"/>
	</rule>

	<rule ref="rulesets/java/migrating.xml"/>

	<rule ref="rulesets/java/naming.xml">
		<!-- There's nothing wrong with short variable names used wisely -->
		<exclude name="ShortClassName"/>
		<exclude name="ShortMethodName"/>
		<exclude name="ShortVariable"/>
	</rule>
	<rule ref="rulesets/java/naming.xml/LongVariable">
		<properties>
			<property name="minimum" value="50"/>
		</properties>
	</rule>

	<rule ref="rulesets/java/optimizations.xml">
		<!-- Too much effort to always make local variables final -->
		<exclude name="LocalVariableCouldBeFinal"/>
	</rule>

	<rule ref="rulesets/java/strictexception.xml"/>

	<rule ref="rulesets/java/strings.xml"/>

	<rule ref="rulesets/java/sunsecure.xml"/>

	<rule ref="rulesets/java/typeresolution.xml"/>

	<rule ref="rulesets/java/unnecessary.xml"/>

	<rule ref="rulesets/java/unusedcode.xml"/>
</ruleset>
