apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'findbugs'

buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
        classpath 'com.chaitanyapramod.gradle:findbugs-android:1.0'
    }
}
apply plugin: net.ltgt.gradle.errorprone.ErrorPronePlugin
apply plugin: com.chaitanyapramod.gradle.android.findbugs.FindBugsAndroidPlugin

// TODO(dotdoom): replace 'buildscript' and 'apply' above with just
// plugins {
//     id 'net.ltgt.errorprone' version '0.0.10'
// }
// once the section about "Can only be used in build scripts" goes away:
// https://docs.gradle.org/4.1-rc-1/userguide/plugins.html#plugins_dsl_limitations

checkstyle {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.CheckstyleExtension.html
    toolVersion '7.8.2'
}

pmd {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.PmdExtension.html
    toolVersion '5.8.0'
}

findbugs {
    // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugsExtension.html
    toolVersion '3.0.1'
    group 'Verification'
    effort = 'max'
    // Contrary to what one may think, 'low' means 'tell about everything'
    reportLevel = 'low'
    excludeFilter = file('config/findbugs/filter.xml')
}

// Have to create our own tasks because Android's sourceSets:
// https://android.googlesource.com/platform/tools/build/+/master/gradle/src/main/groovy/com/android/build/gradle/internal/api/DefaultAndroidSourceSet.java
// are not compatible with Gradle sourceSets:
// https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/SourceSet.html
// therefore checkstyle/pmd/etc constructors don't see them.

def sourceDirs(variant) {
    variant.sourceSets.java.srcDirs.collect { it.path  }.flatten()
}

def defineCheckstyle(variant) {
    def name = variant.name.capitalize()
    task "checkstyle$name", type: Checkstyle, {
        // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Checkstyle.html
        group 'Verification'
        source sourceDirs(variant)
        classpath = variant.javaCompile.classpath
        ignoreFailures = false

        showViolations = false
        reports {
            xml.enabled true
            html.enabled false
        }
        finalizedBy "printCheckstyle$name"
    }
    task "printCheckstyle$name" {
        doLast {
            def destination = tasks.findByName("checkstyle$name").reports.getXml()
                .getDestination().getAbsolutePath()
            ant.xslt(
                in: destination,
                out: destination + '.txt',
                style: 'config/checkstyle/text.xslt',
            )
            System.err.println file(destination + '.txt').text
        }
    }
}

def definePMD(variant) {
    def name = variant.name.capitalize()
    task "pmd$name", type: Pmd, {
        // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.Pmd.html
        group 'Verification'
        source sourceDirs(variant)
        classpath = variant.javaCompile.classpath
        ignoreFailures = false
        ruleSetFiles = files('config/pmd/ruleset.xml')

        consoleOutput = false
        reports {
            xml.enabled true
            html.enabled false
        }
        finalizedBy "printPmd$name"
    }
    task "printPmd$name" {
        doLast {
            def destination = tasks.findByName("pmd$name").reports.getXml()
                .getDestination().getAbsolutePath()
            ant.xslt(
                in: destination,
                out: destination + '.txt',
                style: 'config/pmd/text.xslt',
            )
            System.err.println file(destination + '.txt').text
        }
    }
}

def getVariants() {
    if (project.plugins.hasPlugin('com.android.library')) {
        project.android['libraryVariants']
    }
    project.android['applicationVariants']
}

getVariants().all { variant ->
    defineCheckstyle(variant)
    definePMD(variant)
    def name = variant.name.capitalize()
    task "checkQuality$name", dependsOn: [
        "checkstyle$name",
        "pmd$name",
        "findbugs$name",
        "lint$name",
    ], group: 'Verification'
}

project.afterEvaluate {
    tasks.withType(tasks['lint'].class) {
        finalizedBy 'printLint'
    }

    tasks.withType(FindBugs) { fbTask ->
        // https://docs.gradle.org/current/dsl/org.gradle.api.plugins.quality.FindBugs.html
        fbTask.reports {
            emacs.enabled false
            html.enabled false
            text.enabled false
            xml {
                enabled true
                setWithMessages true
            }
        }

        def name = fbTask.name.capitalize()
        task "print$name" {
            doLast {
                def destination = fbTask.reports.getXml().getDestination()
                        .getAbsolutePath()
                ant.xslt(
                    in: destination,
                    out: destination + '.txt',
                    style: 'config/findbugs/text.xslt',
                )
                System.err.println file(destination + '.txt').text
            }
        }
        fbTask.finalizedBy "print$name"
    }
}

task printLint {
    doLast {
        def destination = android.lintOptions.xmlOutput.getAbsolutePath()
        // The file is not created on successful run.
        if (file(destination).exists()) {
            // Write JUnit-style lint for CircleCI to pick up.
            ant.xslt(
                in: destination,
                out: "${project.rootDir}/app/build/test-results/lint/results.xml",
                style: 'config/android-lint/junit.xslt',
            )
            ant.xslt(
                in: destination,
                out: destination + '.txt',
                style: 'config/android-lint/text.xslt',
            )
            System.err.println file(destination + '.txt').text
        }
    }
}

android {
    lintOptions {
        // https://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.LintOptions.html
        // Enable all warnings, even those disabled by default.
        checkAllWarnings true
        warningsAsErrors true
        abortOnError true

        textReport false
        htmlReport false
        xmlReport true
        xmlOutput file('build/reports/android-lint.xml')
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += [
        // Disable "No processor claimed any of these annotations" (@Inject).
        '-Xlint:all,-processing',
        '-XepAllDisabledChecksAsWarnings',
        '-XepDisableWarningsInGeneratedCode',

        // Don't want to annotate all modifiable references with "@Var".
        '-Xep:Var:OFF',

        // Sad but need Firebase-generated R.java to have @Generated.
        '-Xep:ConstantField:OFF',
        '-Xep:PrivateConstructorForUtilityClass:OFF',

        // Doesn't play well with Dagger.
        '-Xep:InjectScopeAnnotationOnInterfaceOrAbstractClass:OFF',

        // Doesn't work with ButterKnife.
        '-Xep:ConstructorLeaksThis:OFF',

        '-Werror',
    ]
}
